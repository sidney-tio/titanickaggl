#initialising
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

# Setting up Pipelines
steps = [('scaler', StandardScaler()),
         ('logreg', LogisticRegression())]

pipeline = Pipeline(steps)

parameters = {'logreg__C':[0.001, 0.01, 0.1, 1, 10, 100, 1000]}

#Load Datasets
train = pd.read_csv(trainfilename)
test = pd.read_csv(testfilename)


#imputing Median age of gender in to NaN values
train.loc[train['Age'].isnull(), 'Age'] = train['Sex'].map(train.groupby('Sex')['Age'].median())
train['Sex'] = train['Sex'].map({'male': 1, 'female':0})

test.loc[train['Age'].isnull(), 'Age'] = test['Sex'].map(train.groupby('Sex')['Age'].median())
test['Sex'] = test['Sex'].map({'male': 1, 'female':0})

#selecting relevant columns
trainy = train['Survived']
trainx = train[['Pclass','Sex','Age','SibSp','Parch','Fare']]

test = test[['Pclass','Sex','Age','SibSp','Parch','Fare']]

#%% Train-test split with GridSearchCV, Score = 0.80

X_train,  X_test, y_train, y_test = train_test_split(trainx, trainy, random_state = 0) 
clf = GridSearchCV(pipeline, param_grid = parameters, cv = 5)
clf.fit(X_train, y_train)


#%% Formatting to Competition requirements, Kaggle score = 0.76076
final = pd.DataFrame(data = {'PassengerId': test['PassengerId'], 'Survived':clf.predict(test1)})
final.to_csv(finalfilename, index= False)
